#!/usr/bin/env python
import argparse
import logging
import multiprocessing
import os
import subprocess
import sys
import time

import i3ipc

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)-8s %(message)s')


class WaitState:
    def __init__(self, event_count):
        self.event_count = event_count


def sleep_and_run_command(command):
    """This runs in a separate process"""
    s = 0.1  # just enough to let i3ipc.main() loop start
    logging.info(f"Runner process sleeping for {s}s")
    time.sleep(s)

    logging.info(f"Running: {command}")
    subprocess.run(" ".join(command), shell=True)


def is_required_window(
    window_app_id,
    window_instance,
    window_class,
    required_app_id,
    required_instance,
    required_class
):
    if window_app_id is not None:
        if required_app_id is not None:
            return window_app_id == required_app_id
        else:
            return False

    if required_instance is not None and window_instance is not None:
        return window_instance == required_instance

    if required_class is not None and window_class is not None:
        return window_class == required_class

    return False


def get_on_window_callback(command, nocheck, wait_state,
                           required_app_id=None,
                           required_instance=None,
                           required_class=None):
    def on_window(i3, e):
        """Callback function from i3ipc.main() loop"""
        logging.info(f"Got a {e.change} window event:")

        if nocheck \
           or (required_app_id is None
               and required_instance is None
               and required_class is None):
            i3.main_quit()
            return

        window_container = e.ipc_data["container"]
        window_app_id = window_container["app_id"]

        if window_app_id is None:
            window_properties = window_container["window_properties"]
            window_instance = window_properties["instance"]
            window_class = window_properties["class"]

            window_info_str = "(Instance: {} (Expected: {}),"\
                              " class: {} (Expected: {}))".format(
                                  window_properties["instance"],
                                  required_instance,
                                  window_properties["class"],
                                  required_class
                              )
        else:
            window_instance = None
            window_class = None

            window_info_str = "(App ID: {} (Expected: {}))".format(
                window_app_id,
                required_app_id
            )

        if is_required_window(window_app_id,
                              window_instance,
                              window_class,
                              required_app_id,
                              required_instance,
                              required_class):
            logging.info(
                "Required window {} appeared".format(window_info_str)
            )

            wait_state.event_count -= 1
            if wait_state.event_count == 0:
                i3.main_quit()

            return

        logging.info(
            "A new window appeared {} but we continue"
            " waiting for another window".format(
                window_info_str
            )
        )

    return on_window


def parse_arguments():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""
Run 'command', wait for a window to open, then exit. If no window
appears in 'timeout' seconds (eg by running a non-GUI program like
'date') then terminate.
""",
        epilog="""eg.

    %(prog)s firefox # this gives time for the window to be created before:
    swaymsg -q "floating disable; border none"

To run more complex commands use "--". eg.

    %(prog)s -- bash -c "some complex bash commands"
    """
    )
    parser.add_argument(
        "--nocheck", dest="nocheck", action="store_true",
        help="don\'t check that the window that opens is for that command"
    )
    parser.add_argument(
        "--timeout", dest="timeout", type=float,
        help="timeout (default = %(default)s secs)", default=30.0
    )
    parser.add_argument(
        "--required-app-id", dest="required_app_id",
        help="For Wayland"
    )
    parser.add_argument(
        "--required-instance", dest="required_instance",
        help="For XWayland"
    )
    parser.add_argument(
        "--required-class", dest="required_class",
        help="For XWayland"
    )
    parser.add_argument(
        "--event-count", default=1, dest="event_count",
        help="For windows with popups at start (like Goldendict)"
    )
    parser.add_argument("command", nargs="+", help="command to run")

    return parser.parse_args()


def main():
    if "SWAYSOCK" not in os.environ:
        return 1

    args = parse_arguments()

    wait_state = WaitState(args.event_count)
    i3_connection = i3ipc.Connection()
    on_window_callback = get_on_window_callback(args.command,
                                                args.nocheck,
                                                wait_state,
                                                args.required_app_id,
                                                args.required_instance,
                                                args.required_class)
    i3_connection.on("window::new", on_window_callback)

    start_time = time.time()

    # run the command in background without waiting
    multiprocessing.Process(
        target=sleep_and_run_command,
        args=[args.command],
        daemon=True
    ).start()
    i3_connection.main(timeout=args.timeout)

    # i3ipc gives no indication that a timeout has occured, so check the clock
    elapsed_time = time.time() - start_time
    if elapsed_time <= args.timeout:
        logging.info(
            "'{} took {} secs to create its first window".format(
                args.command,
                elapsed_time
            )
        )

        return 0

    logging.info(f"Timed out after {args.timeout} seconds")
    return 1


if __name__ == "__main__":
    sys.exit(main())
