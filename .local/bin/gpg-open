#!/bin/bash
# shellcheck source=/dev/null
. ~/.local/lib/lib_bash_utils.sh

# Print script usage information
function print_usage() {
    echo "usage: gpg-open [OPTION] GPG-FILE"
    echo "    -k            keep decrypted file"
}

# Parse script parameters
while getopts k opts; do
    case ${opts} in
        k) OPT_KEEP_FILE_DECRYPTED=1 ;;
        *) ;;
    esac
done

# check for xdg-open tool
if ! [[ -x $(command -v xdg-open) ]]; then
    error_log "xdg-open required but not available"
    exit 1
fi

# check for gpg command
if ! [[ -x $(command -v gpg) ]]; then
    error_log "gpg required but not available"
    exit 1
fi

# verify number of parameters
if [[ $# -lt 1 ]]; then
    error_log "invalid number of parameters"
    print_usage
    exit 1
fi

ENCRYPTED_FILE=${*: -1}
ORIGINAL_FILE="${ENCRYPTED_FILE%.*}"
DECRYPT_PATH=$XDG_RUNTIME_DIR
DECRYPTED_FILE=$DECRYPT_PATH/${ORIGINAL_FILE##*/}

# verify file ending on '.gpg'
if [[ $ENCRYPTED_FILE != *.gpg ]]; then
    error_log "invalid input file (gpg file expected)"
    exit 1
fi

# verify that file exists
if ! [[ -e $ENCRYPTED_FILE ]]; then
    error_log "input file '$ENCRYPTED_FILE' does not exist"
    exit 1
fi

log "decrypting file $ENCRYPTED_FILE to $DECRYPTED_FILE"
if ! gpg --output "$DECRYPTED_FILE" --decrypt "$ENCRYPTED_FILE"; then
    error_log "gpg decrypt operation failed"
    exit 1
fi

log "opening decrypted file $DECRYPTED_FILE"
xdg-open "$DECRYPTED_FILE"

if [[ -z $OPT_KEEP_FILE_DECRYPTED ]]; then
    log "removing decrypted file $DECRYPTED_FILE"
    rm -f "$DECRYPTED_FILE"
else
    mv "$DECRYPTED_FILE" . 
    warn_log "decrypted file $DECRYPTED_FILE not removed but moved to $PWD"
fi
