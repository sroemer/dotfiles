#!/bin/bash
# shellcheck source=/dev/null
. ~/.local/lib/lib_bash_utils.sh
SCRIPT=$(realpath "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")
log "installing/upgrading appimages"

function get_latest_prusaslicer_release_file() {

    # check if curl and jq are available
    if ! [[ -x $(command -v curl) ]]; then
        return 1
    fi
    if ! [[ -x $(command -v jq) ]]; then
        return 1
    fi

    # check arguments (owner and repo)
    local owner="$1"
    local repo="$2"
    if [[ -z "$owner" ]]; then
        return 1
    fi
    if [[ -z "$repo" ]]; then
        return 1
    fi

    # perform the request of the latest release version
    if ! release_file=$(curl -sL https://api.github.com/repos/"$owner"/"$repo"/releases/latest | jq -reM ".assets[].name" | grep -e "linux-x64-GTK3.*AppImage"); then
        return 1
    fi

    # return version on success
    echo "$release_file"
    return 0
}

MQTT_EXPLORER_OUTPUT_FILE="$SCRIPT_PATH/mqtt-explorer"
# MQTT_EXPLORER_VERSION=$(get_github_latest_release_version thomasnordquist MQTT-Explorer)
# Use fix version due to latest release version being an outdated version and we want the beta
MQTT_EXPLORER_VERSION="0.4.0-beta1"
MQTT_EXPLORER_LINK="https://github.com/thomasnordquist/MQTT-Explorer/releases/download/0.0.0-${MQTT_EXPLORER_VERSION}/MQTT-Explorer-${MQTT_EXPLORER_VERSION}.AppImage"
if [[ -f $MQTT_EXPLORER_OUTPUT_FILE ]]; then
    log "$MQTT_EXPLORER_OUTPUT_FILE already exists. Not updating to latest version v$MQTT_EXPLORER_VERSION."
elif [[ -z $MQTT_EXPLORER_VERSION ]]; then
    error_log "getting latest release version for ${MQTT_EXPLORER_VERSION} failed"
else
    log "downloading $MQTT_EXPLORER_OUTPUT_FILE v$MQTT_EXPLORER_VERSION"
    if ! curl -s -L -o "$MQTT_EXPLORER_OUTPUT_FILE" "$MQTT_EXPLORER_LINK"; then
        error_log "downloading appimage $MQTT_EXPLORER_OUTPUT_FILE failed"
    else
        log "$MQTT_EXPLORER_OUTPUT_FILE v$MQTT_EXPLORER_VERSION successfully downloaded"
    fi
fi

PRUSA_SLICER_OUTPUT_FILE="$SCRIPT_PATH/prusaslicer"
PRUSA_SLICER_VERSION=$(get_github_latest_release_version prusa3d PrusaSlicer)
PRUSA_SLICER_VERSION_FILE=$(get_latest_prusaslicer_release_file prusa3d PrusaSlicer)
if [[ -f $PRUSA_SLICER_OUTPUT_FILE ]]; then
    PRUSA_SLICER_INSTALLED_VERSION=version_$(prusaslicer --help | head -n 1 | cut -d"-" -f 2 | cut -d "+" -f 1)
    log "$PRUSA_SLICER_OUTPUT_FILE version $PRUSA_SLICER_INSTALLED_VERSION found"
fi
PRUSA_SLICER_LINK="https://github.com/prusa3d/PrusaSlicer/releases/download/$PRUSA_SLICER_VERSION/$PRUSA_SLICER_VERSION_FILE"
if [[ -z $PRUSA_SLICER_VERSION ]]; then
    error_log "getting latest release version for ${PRUSA_SLICER_OUTPUT_FILE} failed"
elif [[ "$PRUSA_SLICER_INSTALLED_VERSION" == "$PRUSA_SLICER_VERSION" ]]; then
    log "$PRUSA_SLICER_OUTPUT_FILE is up to date ($PRUSA_SLICER_VERSION)"
else
    log "downloading $PRUSA_SLICER_OUTPUT_FILE $PRUSA_SLICER_VERSION"
    if ! curl -s -L -o "$PRUSA_SLICER_OUTPUT_FILE" "$PRUSA_SLICER_LINK"; then
        error_log "downloading appimage $PRUSA_SLICER_OUTPUT_FILE failed"
    else
        log "$PRUSA_SLICER_OUTPUT_FILE v$PRUSA_SLICER_VERSION successfully downloaded"
    fi
fi

# MAKE APP IMAGES EXECUTABLE
log "making appimages executable"
chmod +x "$SCRIPT_PATH"/*

log "installing/upgrading appimages finished"
